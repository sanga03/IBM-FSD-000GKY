js - client side
intrepreter / parsing and intrepretation

DOM - document object model

1 window
2 document

data types:
 var -- can hold any variable (type casting is dynamic)
 local - let
 global -  
 constant - const

 uses/ benifits:
 	validations
 	event handling

functional programing:
       dependate on function

 oop:
 		class method



arrays 
let vals=[1,4,"hello"]



local storage --browser  (10 MB to storage) different availiblity (browser)

  const saveLocalStore(){
  	localStorage.setItem("message","the message");
  }
  saveLocalStore();

 session storage -- respective of tab (every browser tab)
     				j session ID
     				

     				
   maps(new val is updated with the same key)
    const maps = new Map()

   maps.set("key","val");
   for()

   set (used in frequence search)
// avoids duplication (new val is discarded)

   const set = new Set()
   set.add("hello")
    for(lete item in set){
    	log(item)
    }

weak  map:

  key should be object references

  map function
   emaps.map(e=>{
   	return{
   		name = e.name+" just"+e.surname; 
   	}
   })


   reduce =>
   map.reduce((_p,_mn)=>{
   	return _p+_mn
   })
   


reduceRight() => from right to left


accumalotors by organisation

classes and object:
  const class cannot be assigned to other object 

  seal(object) seals the object from updation

  obj = Object.create({},{});
  obj = Object.assign(old_obj);

  clousure()
   recursive function

   error handling
   class customError extends error{
    super("message");
   }

   async function function_name(argument) {
     // body...
     await
   }



   HTTP:
          {request , request headers}, {response,response headers}

    GET
    POST
    PUT
    DELETE
    PATCH
    OPTIONS



    get: (size and lenght limitations)
      url -- query string{ id, name,}
              path parameters (fb.com/id/name/....)

    POST: (query & path)

(API)web services standard:
    SOAP (simple object Acceess protocol)
          WSDL (web services discriptor language){XML discriptor} drawback only XML
          unnessary overhead (extra data download)
    REST (representaional state transfer)
          follows HTTP protocol (not strongly typed)can have json , xml...

          fetch(_url,{
            method:'GET'
          }).then((res)=>{
            const data = await res.json();
            callback()
            console.log(res)
          }).catch();

          promise: 

